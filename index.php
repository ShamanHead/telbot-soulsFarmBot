<?php

require_once('lib/modules/Bot.php');
require_once('lib/modules/Inquiry.php');
require_once('lib/modules/Context.php');
require_once('lib/modules/User.php');
require_once('lib/modules/Utils.php');
require_once('lib/modules/InputHandle.php');
require_once('lib/modules/Chat.php');

use \Telbot\Context as Context;
use \Telbot\Inquiry as Inquiry;
use \Telbot\Bot as Bot;
use \Telbot\User as User;
use \Telbot\Utils as Utils;
use \Telbot\InputHandle as InputHandle;
use \Telbot\Chat as Chat;

$data = json_decode(file_get_contents('php://input'));
$bot = new Bot('1009655071:AAEoB3-DO74_FLnc4K9osmrYHf3XEGHVc-g');
$ih = new InputHandle();
$bot->enableSql();
$DBH = new PDO('mysql:host=us-cdbr-iron-east-05.cleardb.net;charset=utf8;dbname=heroku_75918dcf01cbce3', 'be76b1edb6932d', '38023b9d');
$bot->externalPdo($DBH);

$userId = $ih->getUserId();
$message = $ih->getMessageText();

// if(!Chat::get($bot, $ih->getChatId())) Chat::add($bot, $ih->getChatId(), $ih->getChatType());

require_once('User.php');
require_once('Weapon.php');
require_once('Potion.php');
require_once('Dungeon.php');
require_once('Adventure.php');

$mainKeyboard = Utils::buildKeyboard([[['üèò–ì–æ—Ä–æ–¥'], ['üí™–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂'], ['üßü‚Äç‚ôÄÔ∏è–ü–æ–¥–∑–µ–º–µ–ª—å–µ']]], true, true);
$cityKeyboard = Utils::buildKeyboard([[['üõ†–ö—É–∑–Ω–∏—Ü–∞']], [['‚ùå–í—ã–π—Ç–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞']]], true, true);
$user = getUser();
$levelFormula = $user['level'] * 15;
$weapon = findWeaponById($user['weaponId']);
$weaponDamage = $weapon['damage'] + ($user['weaponLevel'] * ($weapon['damage'] * 0.1));

function registrationStart(){
	global $userId;
	global $DBH;
	global $ih;
	global $bot;
	$userExistQuery = $DBH->prepare('SELECT * FROM users WHERE userId = :userId');
	$userExistQuery->bindParam(':userId', $userId);
	$userExistQuery->execute();
	$userExist = $userExistQuery->fetchAll();
	if(!$userExist){
		Inquiry::send($bot, 'sendMessage' , [
			'chat_id' => $ih->getChatId(),
			'text' => '–•–º–º–º, —è –Ω–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –≥–µ—Ä–æ–µ–≤, –Ω–æ —è –≤–∏–∂—É –ø—ã–ª –≤ —Ç–≤–æ–∏—Ö –≥–ª–∞–∑–∞—Ö.–î–∞, —Ç—ã —Ö–æ—á–µ—à—å —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –∑–ª–æ!–ù–∞–∑–æ–≤–∏—Å—å, –≥–µ—Ä–æ–π!'
		]);
		$addUser = $DBH->prepare('INSERT INTO users (userId) VALUES(:userId)');
		$addUser->bindParam(':userId', $userId);
		$addUser->execute();
		Context::write($bot, $userId, 'registration');
		die();
	}
}

function registrationEnd(){
	global $userId;
	global $DBH;
	global $message;
	$UpdateUser = $DBH->prepare('UPDATE users SET nickname = :nickname WHERE userId = :userId');
	$UpdateUser->bindParam(':nickname', $message);
	$UpdateUser->bindParam(':userId', $userId);
	$UpdateUser->execute();
}

if($user['exp'] >= $levelFormula && $user){
	Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!'
					]);
	increaseLevel();
}
if(Context::read($bot, $userId) == 'in_adventure' && ($ih->getCallBackData() != 'quit_adventure' && $ih->getCallBackData() != 'continue_adventure' && $ih->getCallBackData() != 'adventure_attack')){
		Inquiry::send($bot, 'sendMessage' , [
			'chat_id' => $ih->getChatId(),
			'text' => '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ–≥–æ –Ω–∞—Ö–æ–¥—è—Å—å –≤ –ø–æ–¥–∑–µ–º–µ–ª–∏–∏!'
		]);
		die();
}
switch($ih->getQueryType()){
	case 'callback_query':
		if(preg_match("/start_new_dungeon_([1-9]+)/",$ih->getCallBackData())){
			Context::write($bot, $userId, 'in_adventure');
			$matches;
			preg_match("/start_new_dungeon_([1-9]+)/",$ih->getCallBackData(), $matches);
			$dungeon = findDungeonById($matches[1]);
			Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–í—ã –≤–æ—à–ª–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª–∏–µ...'
					]);
			newAdventure($matches[1]);
			$hp = $user['level'] * 10;
			$expErning = findDungeonById($matches[1])['exp'];
				sleep(3);
				$mob = spawnRandomMob($matches[1]);
				$mobHealth = $mob['hp'];
				$mob['damage'] = round($mob['damage'],1, PHP_ROUND_HALF_UP);
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–í—ã —É–≤–∏–¥–µ–ª–∏, –∫–∞–∫ —á—Ç–æ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ –¥–≤–∏–∂–µ—Ç—Å—è.\n–≠—Ç–∏–º —á—Ç–æ-—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è $mob[name].\n–£ –Ω–µ–≥–æ ".$mobHealth." —Ö–ø –∏ $mob[damage] —É—Ä–æ–Ω–∞.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
					]);
				$turn =0;
				$hp -= $mob['damage'];
				updateAdventure(0, 0, $hp, 0, $mob['id'], $mobHealth);
				Inquiry::send($bot, 'sendMessage' , [
								'chat_id' => $ih->getChatId(),
								'text' => "–ú–æ–Ω—Å—Ç—Ä —Ä–∞–Ω–∏–ª –≤–∞—Å!–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å $hp —Ö–ø.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
								'reply_markup' => Utils::buildInlineKeyboard([[['–ê—Ç–∞–∫–æ–≤–∞—Ç—å', 'adventure_attack']]])
							]);
		}
		switch($ih->getCallBackData()){
			case 'buy_weapon':
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–¢—ã —É–≤–µ—Ä–µ–Ω?–≠—Ç–æ –ø–æ–∫—É–ø–∫–∞ –æ–±–æ–π–¥–µ—Ç—Å—è —Ç–µ–±–µ –≤ '.findWeaponToSell($user['level'])['cost'].' –º–æ–Ω–µ—Ç.',
						'reply_markup' => Utils::buildInlineKeyboard([[['–î–∞, –∞–±—Å–æ–ª—é—Ç–Ω–æ.', 'buy_weapon_confirm'], ['–ù–µ—Ç, –µ—â–µ –ø–æ–¥—É–º–∞—é.', 'buy_weapon_cancel']]])
					]);
			break;
			case 'buy_weapon_confirm':
			if($weapon['level'] <= findWeaponToSell($user['level'])['level'] && getMoney() >= findWeaponToSell($user['level'])['cost']){
				subMoney(findWeaponToSell($user['level'])['cost']);
				setWeapon(findWeaponToSell($user['level'])['id']);
			}else{
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–î–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∫ –ø–æ–∫—É–ø–∫–µ.'
					]);
			}
			break;
			case 'buy_weapon_cancel':
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–û–∫–µ–π, —Ç–æ–≥–¥–∞ –∫–∞–∫ –±—É–¥–µ—à—å —É–≤–µ—Ä–µ–Ω, –ø—Ä–∏—Ö–æ–¥–∏!'
					]);
			break;
			case 'upgrade_weapon':
				if($user['money'] >= ($user['weaponLevel'] + 1 * getWeaponLevel()) * 10 && $user['weaponLevel'] < $weapon['maxLevel']){
					increaseWeaponLevel();
				}else{
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ª–∏–±–æ –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ—Å—Ç–∏–≥ —Å–≤–æ–µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.'
						]);
				}
			break;
			case 'buy_weapon_catalog':
				if($weapon['level'] <= findWeaponToSell($user['level'])['level'] && getMoney() >= findWeaponToSell($user['level'])['cost']){
					$weaponToSell = findWeaponToSell($user['level']);
					$keyboard = Utils::buildInlineKeyboard([[['–ö—É–ø–∏—Ç—å '.$weaponToSell['name'].'('.$weaponToSell['cost'].' –º–æ–Ω–µ—Ç)', 'buy_weapon']]]);
					Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?',
						'reply_markup' => $keyboard
					]);
				}else{
					Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?'
					]);
				}
			break;
			case 'max_weapon_level':
				Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–í–∞—à–µ –æ—Ä—É–∂–∏–µ –¥–æ—Å—Ç–∏–≥–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π.'
						]);
			break;
			case 'continue_adventure':
				if(!Context::read($bot, $userId) == 'in_adventure'){
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–í—ã –Ω–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª–∏–∏.'
						]);
					die();
				}
				Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–í—ã –ø–æ—à–ª–∏ –¥–∞–ª—å—à–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª–∏–µ'
						]);
				$adventure = findAdventure();
				$mob = spawnRandomMob($adventure['dungeonId']);
				if(findDungeonById($adventure['dungeonId'])['type'] == 2 && $adventure['mobs_died']){
					$mob['hp'] = $mob['hp'] / 0.3;
					$mob['damage'] = $mob['damage'] / 0.3;
					$mob['money'] = $mob['damage'] / 0.3;
					$expErning = findDungeonById($adventure['dungeonId'])['exp'] / 0.3;
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–°–∏–ª–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤ –∏ –¥—Ä–æ–ø–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 30%!'
						]);
				}
				$mobHealth = $mob['hp'];
				$expErning = findDungeonById($adventure['dungeonId'])['exp'];
				$hp = $adventure['hp'];
				$hp -= $mob['damage'];
				$hp = round($hp,1, PHP_ROUND_HALF_UP);
				$mobHealth = round($mobHealth,1, PHP_ROUND_HALF_UP);
				$mob['damage'] = round($mob['damage'],1, PHP_ROUND_HALF_UP);
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–í—ã —É–≤–∏–¥–µ–ª–∏, –∫–∞–∫ —á—Ç–æ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ –¥–≤–∏–∂–µ—Ç—Å—è.\n–≠—Ç–∏–º —á—Ç–æ-—Ç–æ –æ–∫–∞–∑–∞–ª—Å—è $mob[name].\n–£ –Ω–µ–≥–æ ".$mobHealth." —Ö–ø –∏ $mob[damage] —É—Ä–æ–Ω–∞.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
					]);
				updateAdventure(0, 0, $hp, 1, $mob['id'], $mobHealth);
				Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => "–ú–æ–± –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å.–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ".$hp." —Ö–ø.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
							'reply_markup' => Utils::buildInlineKeyboard([[['–ê—Ç–∞–∫–æ–≤–∞—Ç—å' , 'adventure_attack']]])
						]);
			break;
			case 'adventure_attack':
				if(!Context::read($bot, $userId) == 'in_adventure'){
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–í—ã –Ω–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª–∏–∏.'
						]);
					die();
				}
				$adventure = findAdventure();
				$hp = $adventure['hp'];
				$mob = findMob($adventure['mobId']);
				$mobHealth = $adventure['mobHp'];
				$expErning = findDungeonById($adventure['dungeonId'])['exp'];
				$hp = round($hp,1, PHP_ROUND_HALF_UP);
				$mobHealth = round($mobHealth,1, PHP_ROUND_HALF_UP);
				$mob['damage'] = round($mob['damage'],1, PHP_ROUND_HALF_UP);
				$mobHealth -= $weaponDamage;
				if($mobHealth > 0){
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞.–£ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å '.$mobHealth.' —Ö–ø'
						]);
					$hp -= $mob['damage'];
					if($hp < 0){
						Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => '–í—ã —É–º–µ—Ä–ª–∏.'
						]);
						deleteAdventure();
						Context::delete($bot, $userId);
						die();
					}
					updateAdventure(0, 0, $hp, 0, $adventure['mobId'], $mobHealth);
					Inquiry::send($bot, 'sendMessage' , [
								'chat_id' => $ih->getChatId(),
								'text' => "–ú–æ–± –∞—Ç–∞–∫–æ–≤–∞–ª –≤–∞—Å.–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ".$hp." —Ö–ø.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
								'reply_markup' => Utils::buildInlineKeyboard([[['–ê—Ç–∞–∫–æ–≤–∞—Ç—å' , 'adventure_attack']]])
							]);
				}else{
					updateAdventure($mob['money'], $expErning, $hp,1, 0,  0);
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => "–í—ã —É–±–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞.–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å $hp —Ö–ø.",
							'reply_markup' => Utils::buildInlineKeyboard([[['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å', 'continue_adventure']], [['–ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–¥–∑–µ–º–µ–ª–∏–µ', 'quit_adventure']]])
						]);
				}
			break;
			case 'quit_adventure':
				$adventure = findAdventure();
				if($adventure){
					addMoney($adventure['money']);
					addExp($adventure['exp']);
					deleteAdventure();
					Context::delete($bot, $userId);
				}else{
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
						]);
				}
			break;
		}
		break;
	case 'message':
		registrationStart();
		switch($ih->getMessageText()){
			case '/kb':
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.",
						'reply_markup' => $mainKeyboard
					]);
			break;
			case '/help':
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∏–ª—å–¥–∏—é –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤.–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
						'reply_markup' => Utils::buildInlineKeyboard([[['–ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º...', 'work']]])
					]);
			break;
			case '/test':
				Inquiry::send($bot, 'sendMessage' , [
								'chat_id' => $ih->getChatId(),
								'text' => print_r(findDungeonByLevel($user['level']), true)
							]);
			break;
			case 'üõ†–ö—É–∑–Ω–∏—Ü–∞':
				$weapon = findWeaponToSell($user['level']);
				if($user['weaponLevel'] >= $weapon['maxLevel']){
					$upgrade = [['–£ –≤–∞—à–µ–≥–æ –æ—Ä—É–∂–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', 'max_weapon_level']];
				}else{
					$upgrade = [['–£–ª—É—á—à–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è('.(($user['weaponLevel'] + 1 * getWeaponLevel()) * 10).' –º–æ–Ω–µ—Ç)', 'upgrade_weapon']];
				}
					Inquiry::send($bot, 'sendMessage' , [
							'chat_id' => $ih->getChatId(),
							'text' => "–ü—Ä–∏–≤–µ—Ç, —è –î–∂–æ!–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É–∑–Ω–∏—Ü—É.–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ü–µ–Ω—É!.",
							'reply_markup' => Utils::buildInlineKeyboard([[["–ü–æ–∫—É–ø–∫–∞ –∞–º–º—É–Ω–∏—Ü–∏–∏", 'buy_weapon_catalog']], $upgrade])
						]);
			break;
			case 'üèò–ì–æ—Ä–æ–¥':
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–µ–π–¢–∞—É–Ω!",
						'reply_markup' => $cityKeyboard
					]);
			break;
			case 'üí™–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂':
				switch($weapon['rare']){
					case '1':
						$weapon['rare'] = '–û–±—ã—á–Ω—ã–π';
					break;
					case '2':
						$weapon['rare'] = '–†–µ–¥–∫–∏–π';
					break;
					case '3':
						$weapon['rare'] = '–î—Ä–µ–≤–Ω–∏–π';
					break;
					case '4':
						$weapon['rare'] = '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π';
					break;
					case '5':
						$weapon['rare'] = '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π';
					break;
				}
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "~~~~~~–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂~~~~~~\n–ü—Ä–æ–∑–≤–∏—â–µ: $user[nickname]\n–£—Ä–æ–≤–µ–Ω—å: $user[level]\n–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç: $user[money]\n–û—Ä—É–∂–∏–µ: $weapon[name]\n–†–µ–¥–∫–æ—Å—Ç—å: $weapon[rare]\n–£—Ä–æ–≤–µ–Ω—å –æ—Ä—É–∂–∏—è: $user[weaponLevel]\n–°—É–º–º–∞—Ä–Ω—ã–π —É—Ä–æ–Ω: $weaponDamage\n–û–ø—ã—Ç: $user[exp]\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ".($levelFormula - $user['exp']),
					]);
			break;
			case 'üßü‚Äç‚ôÄÔ∏è–ü–æ–¥–∑–µ–º–µ–ª—å–µ':
				$dungeons = findDungeonByLevel($user['level']);
				$keyboard = [[]];
				for($i = 0;$i < count($dungeons);$i++){
					array_push($keyboard[0],[$dungeons[$i]['name'].'('.$dungeons[$i]['level'].' —É—Ä–æ–≤–Ω–∏)', 'start_new_dungeon_'.$dungeons[$i]['id']]);
				}
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∑–º–µ–ª—å–µ.",
						'reply_markup' => Utils::buildInlineKeyboard($keyboard, true, true)
					]);
			break;
			case '‚ùå–í—ã–π—Ç–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞':
				Inquiry::send($bot, 'sendMessage' , [
						'chat_id' => $ih->getChatId(),
						'text' => "–í—ã –≤—ã—à–ª–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞.",
						'reply_markup' => $mainKeyboard
					]);
			break;
			default:
			if(!Context::read($bot, $ih->getUserId())){
				Inquiry::send($bot, 'sendMessage' , [
					'chat_id' => $ih->getChatId(),
					'text' => "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å.\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–æ—â–∏, –Ω–∞–ø–∏—à–∏ /help."
				]);
			}
			switch(Context::read($bot, $userId)){
				case 'registration':
				if(!findNickName($message)){
					Inquiry::send($bot, 'sendMessage', [
						'chat_id' => $userId,
						'text' => '–û—Ç–ª–∏—á–Ω–æ, '.$message."!\n–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π!–î–µ—Ä–∂–∏ –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ö–æ—Ç–Ω–∏–∫–∞ –Ω–∞ –¥–µ–º–æ–Ω–æ–≤.\n–° –ø–æ–º–æ—â—å—é –Ω–µ–µ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–µ—â–∞—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å—è 1-5 —É—Ä–æ–≤–Ω—è!\n–¢–∞–∫–∂–µ —è –¥–∞–ª —Ç–µ–±–µ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ.–ü–æ—á–∏—Ç–∞—Ç—å –æ –Ω–∏—Ö —Ç—ã —Å–º–æ–∂–µ—à—å —É —Å–µ–±—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.–ò –¥–∞!–ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –∫—É–∑–Ω–∏—Ü—É –∏ –∫—É–ø–∏—Ç—å –º–µ—á –Ω–∞ —Ç–µ –¥–µ–Ω—å–≥–∏, —á—Ç–æ —è —Ç–µ–±–µ –¥–∞–ª.",
							'reply_markup' => $cityKeyboard
					]);
					sleep(1);
					sleep(1);
					addMoney(5);
					registrationEnd();
					Context::delete($bot, $userId);

				}else{
					Inquiry::send($bot, 'sendMessage', [
						'chat_id' => $userId,
						'text' => "–ò–∑–≤–∏–Ω–∏, –Ω–æ –æ—Ö–æ—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ–∑–≤–∏—â–µ –ø–æ–ª—É—á—à–µ —ç—Ç–æ–≥–æ!."
					]);
					Context::write($bot, $userId, 'registration');
				}
				break;
			}
			break;
		}
		break;
}
?>